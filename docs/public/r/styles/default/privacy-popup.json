{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "consent-solution",
  "type": "registry:ui",
  "author": "Koroflow (https://koroflow.com/components",
  "dependencies": [
    "@koroflow/core-react"
  ],
  "registryDependencies": [],
  "files": [
    {
      "path": "components/consent/consent-solution.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { createPortal } from \"react-dom\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { X } from \"lucide-react\";\nimport { useConsentManager } from \"@koroflow/core-react\";\n\nimport { Overlay } from \"@/registry/default/components/consent/overlay\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@/registry/default/components/card\";\nimport ConsentCustomizationModal from \"@/registry/default/components/consent/consent-customization-modal\";\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/registry/default/components/button\";\n\ntype HorizontalPosition = \"left\" | \"center\" | \"right\";\ntype VerticalPosition = \"top\" | \"bottom\";\n\ninterface PrivacyPopupProps extends React.HTMLAttributes<HTMLDivElement> {\n  bannerDescription?: string;\n  bannerTitle?: string;\n  horizontalPosition?: HorizontalPosition;\n  verticalPosition?: VerticalPosition;\n  showCloseButton?: boolean;\n}\n\nconst PrivacyPopup = React.forwardRef<HTMLDivElement, PrivacyPopupProps>(\n  (\n    {\n      bannerDescription = \"This site uses cookies and similar technologies to measure and improve your experience and show you personalized content and ads.\",\n      bannerTitle = \"We value your privacy\",\n      className,\n      horizontalPosition = \"left\",\n      verticalPosition = \"bottom\",\n      showCloseButton = false,\n      ...props\n    },\n    ref,\n  ) => {\n    const {\n      showPopup,\n      setShowPopup,\n      saveConsents,\n      setConsent,\n      callbacks,\n      complianceSettings,\n      isPrivacyDialogOpen,\n      hasConsented,\n      consents,\n    } = useConsentManager();\n\n    const bannerShownRef = React.useRef(false);\n    const [isMounted, setIsMounted] = React.useState(false);\n\n    React.useEffect(() => {\n      setIsMounted(true);\n      return () => setIsMounted(false);\n    }, []);\n\n    React.useEffect(() => {\n      if (!isMounted) return;\n\n      if (showPopup && !bannerShownRef.current && !hasConsented()) {\n        callbacks.onBannerShown?.();\n        bannerShownRef.current = true;\n        if (typeof document !== \"undefined\") {\n          document.body.style.overflow = \"hidden\";\n        }\n      }\n\n      return () => {\n        if (typeof document !== \"undefined\") {\n          document.body.style.overflow = \"\";\n        }\n      };\n    }, [showPopup, callbacks, hasConsented, isMounted]);\n\n    const acceptAll = React.useCallback(() => {\n      const allConsents = Object.keys(consents) as (keyof typeof consents)[];\n      allConsents.forEach((consentName) => {\n        setConsent(consentName, true);\n      });\n      saveConsents(\"all\");\n    }, [consents, setConsent, saveConsents]);\n\n    const rejectAll = React.useCallback(() => {\n      saveConsents(\"necessary\");\n    }, [saveConsents]);\n\n    const handleClose = React.useCallback(() => {\n      setShowPopup(false);\n      if (typeof document !== \"undefined\") {\n        document.body.style.overflow = \"\";\n      }\n      callbacks.onBannerClosed?.();\n    }, [setShowPopup, callbacks]);\n\n    const positionClasses = cn(\n      \"fixed z-50 max-w-md\",\n      {\n        \"left-4\": horizontalPosition === \"left\",\n        \"right-4\": horizontalPosition === \"right\",\n        \"left-1/2 -translate-x-1/2\": horizontalPosition === \"center\",\n        \"top-4\": verticalPosition === \"top\",\n        \"bottom-4\": verticalPosition === \"bottom\",\n      },\n      className,\n    );\n\n    // Early return for SSR and when user has consented\n    if (!isMounted || (hasConsented() && !showPopup)) {\n      return null;\n    }\n\n    const BannerContent = () => (\n      <AnimatePresence>\n        {showPopup && !isPrivacyDialogOpen && (\n          <>\n            <Overlay show={showPopup} />\n            <motion.div\n              className=\"fixed inset-0 z-50 flex items-end sm:items-center justify-center\"\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              exit={{ opacity: 0 }}\n              role=\"dialog\"\n              aria-modal=\"true\"\n              aria-labelledby=\"cookie-consent-title\"\n            >\n              <motion.div\n                className={positionClasses}\n                initial={{ opacity: 0, y: 50 }}\n                animate={{ opacity: 1, y: 0 }}\n                exit={{ opacity: 0, y: 50 }}\n                transition={{ type: \"spring\", stiffness: 300, damping: 30 }}\n                ref={ref}\n              >\n                <Card>\n                  <CardHeader className=\"relative\">\n                    {showCloseButton && (\n                      <Button\n                        variant=\"ghost\"\n                        size=\"icon\"\n                        className=\"absolute right-2 top-2\"\n                        onClick={handleClose}\n                        aria-label=\"Close cookie consent banner\"\n                      >\n                        <X className=\"h-4 w-4\" />\n                      </Button>\n                    )}\n                    <CardTitle id=\"cookie-consent-title\">\n                      {bannerTitle}\n                    </CardTitle>\n                    <CardDescription>{bannerDescription}</CardDescription>\n                  </CardHeader>\n                  <CardContent />\n                  <CardFooter className=\"flex flex-col sm:flex-row justify-between gap-4\">\n                    <div className=\"flex flex-row justify-between gap-2\">\n                      {complianceSettings.gdpr.enabled && (\n                        <Button variant=\"outline\" size=\"sm\" onClick={rejectAll}>\n                          Reject All\n                        </Button>\n                      )}\n                      <ConsentCustomizationModal>\n                        <Button variant=\"outline\" size=\"sm\">\n                          Customise Consent\n                        </Button>\n                      </ConsentCustomizationModal>\n                    </div>\n                    <Button size=\"sm\" onClick={acceptAll}>\n                      Accept All\n                    </Button>\n                  </CardFooter>\n                </Card>\n              </motion.div>\n            </motion.div>\n          </>\n        )}\n      </AnimatePresence>\n    );\n\n    return isMounted && createPortal(<BannerContent />, document.body);\n  },\n);\n\nPrivacyPopup.displayName = \"PrivacyPopup\";\n\nexport default PrivacyPopup;\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "components/consent/overlay.tsx",
      "content": "import React from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\n\ninterface OverlayProps {\n  show: boolean;\n}\n\nexport const Overlay: React.FC<OverlayProps> = ({ show }) => {\n  return (\n    <AnimatePresence>\n      {show && (\n        <motion.div\n          className=\"fixed inset-0 bg-black/50 z-40\"\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          exit={{ opacity: 0 }}\n        />\n      )}\n    </AnimatePresence>\n  );\n};\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "components/consent/consent-customization-modal.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { createPortal } from \"react-dom\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { X } from \"lucide-react\";\nimport ConsentCustomizationWidget from \"./consent-customization-widget\";\nimport { useConsentManager } from \"@koroflow/core-react\";\nimport { Overlay } from \"@/registry/default/components/consent/overlay\";\nimport { Button } from \"@/registry/default/components/button\";\nimport {\n  Card,\n  CardHeader,\n  CardTitle,\n  CardDescription,\n  CardContent,\n} from \"@/registry/default/components/card\";\n\ninterface ConsentCustomizationModalProps {\n  children?: React.ReactNode;\n  triggerClassName?: string;\n  showCloseButton?: boolean;\n}\n\nconst modalVariants = {\n  hidden: { opacity: 0 },\n  visible: { opacity: 1 },\n  exit: { opacity: 0 },\n};\n\nconst contentVariants = {\n  hidden: { opacity: 0, scale: 0.95 },\n  visible: {\n    opacity: 1,\n    scale: 1,\n    transition: { type: \"spring\", stiffness: 300, damping: 30 },\n  },\n  exit: {\n    opacity: 0,\n    scale: 0.95,\n    transition: { duration: 0.2 },\n  },\n};\n\nconst ModalContent = ({\n  onClose,\n  showCloseButton,\n  handleSave,\n  ref,\n}: {\n  onClose: () => void;\n  showCloseButton: boolean;\n  handleSave: () => void;\n  ref: React.RefObject<HTMLDivElement>;\n}) => (\n  <Card>\n    <CardHeader className=\"relative\">\n      {showCloseButton && (\n        <Button\n          variant=\"ghost\"\n          size=\"icon\"\n          className=\"absolute right-2 top-2\"\n          onClick={onClose}\n          aria-label=\"Close privacy settings\"\n        >\n          <X className=\"h-4 w-4\" />\n        </Button>\n      )}\n      <CardTitle id=\"privacy-settings-title\">Privacy Settings</CardTitle>\n      <CardDescription>\n        Customize your privacy settings here. You can choose which types of\n        cookies and tracking technologies you allow.\n      </CardDescription>\n    </CardHeader>\n    <CardContent>\n      <ConsentCustomizationWidget onSave={handleSave} />\n    </CardContent>\n  </Card>\n);\n\nconst ConsentCustomizationModal = React.forwardRef<\n  HTMLDivElement,\n  ConsentCustomizationModalProps\n>(({ children, triggerClassName, showCloseButton = false }, ref) => {\n  const {\n    isPrivacyDialogOpen,\n    setIsPrivacyDialogOpen,\n    setShowPopup,\n    saveConsents,\n  } = useConsentManager();\n  const [isMounted, setIsMounted] = React.useState(false);\n  const contentRef = React.useRef<HTMLDivElement>(null);\n\n  React.useEffect(() => {\n    setIsMounted(true);\n    return () => setIsMounted(false);\n  }, []);\n\n  const handleOpenChange = React.useCallback(\n    (newOpen: boolean) => {\n      setIsPrivacyDialogOpen(newOpen);\n      if (newOpen) {\n        setShowPopup(false);\n      }\n    },\n    [setIsPrivacyDialogOpen, setShowPopup],\n  );\n\n  const handleSave = React.useCallback(() => {\n    saveConsents(\"custom\");\n    setIsPrivacyDialogOpen(false);\n  }, [setIsPrivacyDialogOpen, saveConsents]);\n\n  const handleClose = React.useCallback(() => {\n    setIsPrivacyDialogOpen(false);\n  }, [setIsPrivacyDialogOpen]);\n\n  const modalContent = (\n    <AnimatePresence mode=\"wait\">\n      {isPrivacyDialogOpen && (\n        <>\n          <Overlay show={isPrivacyDialogOpen} />\n          <motion.div\n            className=\"fixed inset-0 z-50 flex items-center justify-center\"\n            variants={modalVariants}\n            initial=\"hidden\"\n            animate=\"visible\"\n            exit=\"exit\"\n            role=\"dialog\"\n            aria-modal=\"true\"\n            aria-labelledby=\"privacy-settings-title\"\n          >\n            <motion.div\n              ref={contentRef}\n              className=\"z-50 w-full max-w-md mx-auto\"\n              variants={contentVariants}\n              initial=\"hidden\"\n              animate=\"visible\"\n              exit=\"exit\"\n            >\n              <ModalContent\n                ref={ref as React.RefObject<HTMLDivElement>}\n                onClose={handleClose}\n                showCloseButton={showCloseButton}\n                handleSave={handleSave}\n              />\n            </motion.div>\n          </motion.div>\n        </>\n      )}\n    </AnimatePresence>\n  );\n\n  return (\n    <>\n      <div onClick={() => handleOpenChange(true)}>\n        {children || (\n          <Button variant=\"outline\" size=\"sm\" className={triggerClassName}>\n            Customise Consent\n          </Button>\n        )}\n      </div>\n      {isMounted && createPortal(modalContent, document.body)}\n    </>\n  );\n});\n\nConsentCustomizationModal.displayName = \"ConsentCustomizationModal\";\n\nexport default ConsentCustomizationModal;\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "components/consent/consent-customization-widget.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\n\nimport { Switch } from \"@/components/ui/switch\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Accordion,\n  AccordionContent,\n  AccordionItem,\n  AccordionTrigger,\n} from \"@/components/ui/accordion\";\nimport { ChevronDown } from \"lucide-react\";\nimport { useConsentManager } from \"@koroflow/core-react\";\n\ninterface ConsentCustomizationWidgetProps\n  extends React.HTMLAttributes<HTMLDivElement> {\n  onSave?: () => void;\n}\n\nconst ConsentCustomizationWidget = React.forwardRef<\n  HTMLDivElement,\n  ConsentCustomizationWidgetProps\n>(({ onSave, ...props }, ref) => {\n  const {\n    consents,\n    setConsent,\n    saveConsents,\n    getDisplayedConsents,\n    resetConsents,\n  } = useConsentManager();\n  const [openItems, setOpenItems] = React.useState<string[]>([]);\n\n  const toggleAccordion = React.useCallback((value: string) => {\n    setOpenItems((prev) =>\n      prev.includes(value)\n        ? prev.filter((item) => item !== value)\n        : [...prev, value],\n    );\n  }, []);\n\n  const handleSaveConsents = React.useCallback(() => {\n    saveConsents(\"custom\");\n    if (onSave) {\n      onSave();\n    }\n  }, [saveConsents, onSave]);\n\n  const handleConsentChange = React.useCallback(\n    (name: string, checked: boolean) => {\n      setConsent(name as any, checked);\n    },\n    [setConsent],\n  );\n\n  return (\n    <div className=\"space-y-6\" ref={ref} {...props}>\n      <Accordion\n        type=\"multiple\"\n        value={openItems}\n        onValueChange={setOpenItems}\n        className=\"w-full\"\n      >\n        {getDisplayedConsents().map((consent) => (\n          <AccordionItem value={consent.name} key={consent.name}>\n            <div className=\"flex items-center justify-between py-4\">\n              <div\n                className=\"flex-grow\"\n                onClick={() => toggleAccordion(consent.name)}\n              >\n                <div className=\"flex items-center justify-between cursor-pointer\">\n                  <span className=\"font-medium capitalize\">\n                    {consent.name.replace(\"_\", \" \")}\n                  </span>\n                  <ChevronDown\n                    className={`h-4 w-4 shrink-0 transition-transform duration-200 ${\n                      openItems.includes(consent.name) ? \"rotate-180\" : \"\"\n                    }`}\n                  />\n                </div>\n              </div>\n              <Switch\n                checked={consents[consent.name]}\n                onCheckedChange={(checked) =>\n                  handleConsentChange(consent.name, checked)\n                }\n                disabled={consent.disabled}\n                className=\"ml-4\"\n              />\n            </div>\n            <AccordionContent>\n              <p className=\"text-sm text-muted-foreground pb-4\">\n                {consent.description}\n              </p>\n            </AccordionContent>\n          </AccordionItem>\n        ))}\n      </Accordion>\n      <div className=\"flex justify-between\">\n        <Button onClick={resetConsents} variant=\"outline\">\n          Reset\n        </Button>\n        <Button onClick={handleSaveConsents}>Save Preferences</Button>\n      </div>\n    </div>\n  );\n});\n\nConsentCustomizationWidget.displayName = \"ConsentCustomizationWidget\";\n\nexport default ConsentCustomizationWidget;\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}