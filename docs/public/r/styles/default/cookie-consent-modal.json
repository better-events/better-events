{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "cookie-consent-modal",
  "type": "registry:ui",
  "author": "Better Events (https://better-events.dev/components",
  "registryDependencies": [
    "button",
    "accordion",
    "dialog",
    "form",
    "switch",
    "cookie-popup",
    "gdpr-consent",
    "use-cookie-consent",
    "utils"
  ],
  "files": [
    {
      "path": "components/cookie-consent-modal.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { CircleCheck, CircleX } from \"lucide-react\";\nimport { useForm, Control } from \"react-hook-form\";\nimport { Slot } from \"@radix-ui/react-slot\";\n\nimport { cn } from \"@/lib/utils\";\nimport {\n  Accordion,\n  AccordionContent,\n  AccordionItem,\n  AccordionTrigger,\n} from \"@/registry/default/components/accordion\";\nimport { Button } from \"@/registry/default/components/button\";\nimport {\n  Dialog,\n  DialogClose,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogDescription,\n  DialogFooter,\n  DialogTrigger,\n} from \"@/registry/default/components/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n} from \"@/registry/default/components/form\";\nimport { Switch } from \"@/registry/default/components/switch\";\nimport { CookiePopup } from \"@/registry/default/components/cookie-popup\";\nimport {\n  allConsentNames,\n  consentType,\n} from \"@/registry/default/lib/gdpr-consent-types\";\nimport { useCookieConsent } from \"@/registry/default/hooks/use-cookie-consent\";\n\ntype CookieConsentContextType = {\n  consent: (params: {\n    gdprPurposes?: Record<allConsentNames, boolean>;\n    type: \"all\" | \"minimum\" | \"custom\";\n  }) => void;\n};\n\nconst CookieConsentContext = React.createContext<\n  CookieConsentContextType | undefined\n>(undefined);\n\nfunction useCookieConsentContext() {\n  const context = React.useContext(CookieConsentContext);\n  if (!context) {\n    throw new Error(\n      \"Cookie consent components must be used within CookieConsentModal\",\n    );\n  }\n  return context;\n}\n\ntype CookieModalProps = {\n  children: React.ReactNode;\n  className?: string;\n  requiredGdprPurposes: allConsentNames[];\n  style?: React.CSSProperties;\n  useAnalytics: () => {\n    consent: (params: {\n      gdprPurposes?: Record<allConsentNames, boolean>;\n      type: \"all\" | \"minimum\" | \"custom\";\n    }) => void;\n  };\n  renderConsentItem?: (props: {\n    cookie: consentType;\n    control: Control<Record<allConsentNames, boolean>>;\n  }) => React.ReactNode;\n  customSections?: React.ReactNode;\n  dialogTitle?: React.ReactNode;\n  dialogDescription?: React.ReactNode;\n  lockScroll?: boolean;\n};\n\nexport function CookieConsentModal({\n  children,\n  className,\n  requiredGdprPurposes,\n  style,\n  useAnalytics,\n  renderConsentItem,\n  customSections,\n  dialogTitle,\n  dialogDescription,\n  lockScroll = false,\n}: CookieModalProps) {\n  const { consent } = useAnalytics();\n  const { mergedList, defaultValues } = useCookieConsent(requiredGdprPurposes);\n\n  const form = useForm<Record<allConsentNames, boolean>>({\n    defaultValues,\n  });\n\n  const contextValue = React.useMemo(() => ({ consent }), [consent]);\n\n  return (\n    <CookieConsentContext.Provider value={contextValue}>\n      <Dialog>\n        <Form {...form}>\n          <CookiePopup\n            className={className}\n            style={style}\n            lockScroll={lockScroll}\n          >\n            {children}\n          </CookiePopup>\n          <DialogContent className=\"sm:max-w-lg\">\n            <form\n              onSubmit={form.handleSubmit((data) => {\n                const gdprPurposes = { ...defaultValues, ...data };\n                consent({ gdprPurposes, type: \"custom\" });\n              })}\n            >\n              <DialogHeader>\n                {dialogTitle ? (\n                  <div className=\"text-lg font-semibold leading-none tracking-tight\">\n                    {dialogTitle}\n                  </div>\n                ) : (\n                  <DialogTitle>Cookie Preferences</DialogTitle>\n                )}\n                <DialogDescription asChild>\n                  <CustomDialogDescription>\n                    {dialogDescription || (\n                      <>\n                        We use cookies to improve your site experience. The\n                        \"strictly necessary\" cookies are required for the site\n                        to function.\n                      </>\n                    )}\n                  </CustomDialogDescription>\n                </DialogDescription>\n              </DialogHeader>\n              <Accordion className=\"w-full mt-4\" collapsible type=\"single\">\n                {mergedList.map((cookie) => (\n                  <React.Fragment key={cookie.name}>\n                    {renderConsentItem ? (\n                      renderConsentItem({ cookie, control: form.control })\n                    ) : (\n                      <CookieConsentItem\n                        key={cookie.name}\n                        cookie={cookie}\n                        control={form.control}\n                      />\n                    )}\n                  </React.Fragment>\n                ))}\n              </Accordion>\n              {customSections}\n              <DialogFooter className=\"mt-6\">\n                <DialogClose asChild>\n                  <Button type=\"submit\">Save Current Settings</Button>\n                </DialogClose>\n              </DialogFooter>\n            </form>\n          </DialogContent>\n        </Form>\n      </Dialog>\n    </CookieConsentContext.Provider>\n  );\n}\n\nfunction CookieConsentItem({\n  cookie,\n  control,\n}: {\n  cookie: consentType;\n  control: Control<Record<allConsentNames, boolean>>;\n}) {\n  return (\n    <AccordionItem value={cookie.name}>\n      <AccordionTrigger className=\"px-4\">\n        <div className=\"flex items-center space-x-2 text-foreground capitalize\">\n          <FormField\n            control={control}\n            name={cookie.name}\n            render={({ field }) => (\n              <FormItem className=\"flex flex-row items-center space-x-3 space-y-0\">\n                <FormControl>\n                  <Switch\n                    checked={field.value}\n                    onCheckedChange={field.onChange}\n                    disabled={cookie.disabled}\n                    aria-readonly={cookie.disabled}\n                  />\n                </FormControl>\n                <FormLabel className=\"font-normal\">\n                  {field.value ? (\n                    <CircleCheck className=\"h-4 w-4 text-green-500\" />\n                  ) : (\n                    <CircleX className=\"h-4 w-4 text-red-500\" />\n                  )}\n                  <span className=\"ml-2\">{cookie.name}</span>\n                </FormLabel>\n              </FormItem>\n            )}\n          />\n        </div>\n      </AccordionTrigger>\n      <AccordionContent className=\"px-4\">\n        <FormDescription>{cookie.description}</FormDescription>\n      </AccordionContent>\n    </AccordionItem>\n  );\n}\n\nconst CustomDialogDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"p\";\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  );\n});\nCustomDialogDescription.displayName = \"CustomDialogDescription\";\n\nexport const CookieConsentTrigger = DialogTrigger;\nexport const CookieConsentAccept = ({\n  children,\n  onClick,\n}: {\n  children: React.ReactNode;\n  onClick?: () => void;\n}) => {\n  const { consent } = useCookieConsentContext();\n  return (\n    <Button\n      onClick={() => {\n        consent({ type: \"all\" });\n        if (onClick) onClick();\n      }}\n    >\n      {children}\n    </Button>\n  );\n};\nexport const CookieConsentDecline = ({\n  children,\n  onClick,\n}: {\n  children: React.ReactNode;\n  onClick?: () => void;\n}) => {\n  const { consent } = useCookieConsentContext();\n  return (\n    <Button\n      variant=\"outline\"\n      onClick={() => {\n        consent({ type: \"minimum\" });\n        if (onClick) onClick();\n      }}\n    >\n      {children}\n    </Button>\n  );\n};\n",
      "type": "registry:page",
      "target": ""
    }
  ]
}